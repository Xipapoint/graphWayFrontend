import { customInstance } from '.././customInstance';
/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * GraphWay API
 * API для работы с режимами сессий
 * OpenAPI spec version: 1.0
 */
import type {
  CreateSessionAlgorithmRequestDTO,
  FindSessionAlgorithmsResponseDTO,
  SessionAlgorithmDTO,
} from '.././model';

/**
 * @summary Find session algorithms
 */
export type sessionAlgorithmControllerFindSessionAlgorithmsResponse = {
  data: FindSessionAlgorithmsResponseDTO | void;
  status: number;
  headers: Headers;
};

export const getSessionAlgorithmControllerFindSessionAlgorithmsUrl = () => {
  return `/session-algorithms/all`;
};

export const sessionAlgorithmControllerFindSessionAlgorithms = async (
  options?: RequestInit,
): Promise<sessionAlgorithmControllerFindSessionAlgorithmsResponse> => {
  return customInstance<sessionAlgorithmControllerFindSessionAlgorithmsResponse>(
    getSessionAlgorithmControllerFindSessionAlgorithmsUrl(),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * @summary Create a session algorithms
 */
export type sessionAlgorithmControllerCreateSessionAlgorithmResponse = {
  data: void | void;
  status: number;
  headers: Headers;
};

export const getSessionAlgorithmControllerCreateSessionAlgorithmUrl = () => {
  return `/session-algorithms/create`;
};

export const sessionAlgorithmControllerCreateSessionAlgorithm = async (
  createSessionAlgorithmRequestDTO: CreateSessionAlgorithmRequestDTO,
  options?: RequestInit,
): Promise<sessionAlgorithmControllerCreateSessionAlgorithmResponse> => {
  return customInstance<sessionAlgorithmControllerCreateSessionAlgorithmResponse>(
    getSessionAlgorithmControllerCreateSessionAlgorithmUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(createSessionAlgorithmRequestDTO),
    },
  );
};

/**
 * @summary Find session algorithms by structure ID
 */
export type sessionAlgorithmControllerFindSessionAlgorithmsByStructureIdResponse =
  {
    data: SessionAlgorithmDTO[] | void;
    status: number;
    headers: Headers;
  };

export const getSessionAlgorithmControllerFindSessionAlgorithmsByStructureIdUrl =
  (structureId: string) => {
    return `/session-algorithms/by-structure/${structureId}`;
  };

export const sessionAlgorithmControllerFindSessionAlgorithmsByStructureId =
  async (
    structureId: string,
    options?: RequestInit,
  ): Promise<sessionAlgorithmControllerFindSessionAlgorithmsByStructureIdResponse> => {
    return customInstance<sessionAlgorithmControllerFindSessionAlgorithmsByStructureIdResponse>(
      getSessionAlgorithmControllerFindSessionAlgorithmsByStructureIdUrl(
        structureId,
      ),
      {
        ...options,
        method: 'GET',
      },
    );
  };
